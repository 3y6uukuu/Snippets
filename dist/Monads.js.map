{"version":3,"sources":["../Monads.js"],"names":["pure","first","x","monadMap","fn","Ma","times10","firstMonadResult","secondMonadResult","console","log","bind","fail","add42","pure3","maybe1","maybe2","maybe3","pureMaybe","failMaybe","just","nothing","fst","snd","y","add7","bindMaybe","maybe4","maybe5","maybe6","maybe7"],"mappings":";;;;AAAA;;AAEA,IAAMA,OAAO,SAAPA,IAAO,IAAK;AAACC,SAAOC;AAAE,CAA5B;;AAEA,IAAMC,WAAW,SAAXA,QAAW;AAAA,SAAM;AAAA,WAAMC,GAAGC,GAAGJ,KAAN,CAAN;AAAA,GAAN;AAAA,CAAjB;;AAEA,IAAMK,UAAU,SAAVA,OAAU;AAAA,SAAKN,KAAKE,IAAI,EAAT,CAAL;AAAA,CAAhB;;AAEA,IAAMK,mBAAmBJ,SAASH,KAAK,EAAL,CAAT,EAAmBM,OAAnB,CAAzB;AACA,IAAME,oBAAoBL,SAASI,gBAAT,EAA2BD,OAA3B,CAA1B;;AAEAG,QAAQC,GAAR,CAAYH,gBAAZ,E,CAAgC;AAChCE,QAAQC,GAAR,CAAYF,iBAAZ,E,CAAgC;;AAEhC;;AAEA;AACA;;AAEA,IAAMG,OAAO,SAAPA,IAAO;AAAA,SAAM;AAAA,WAAMN,GAAG,OAAH,IAAcD,GAAGC,GAAG,OAAH,CAAH,CAAd,GAAgCO,MAAtC;AAAA,GAAN;AAAA,CAAb;;AAEA,IAAMC,QAAQ,SAARA,KAAQ;AAAA,SAAKC,MAAMZ,IAAI,EAAV,CAAL;AAAA,CAAd;;AAEA,IAAMa,SAASJ,KAAKG,MAAM,EAAN,CAAL,EAAgBD,KAAhB,CAAf;AACA,IAAMG,SAASL,KAAKC,KAAKG,MAAL,CAAL,EAAmBF,KAAnB,CAAf;AACA,IAAMI,SAASN,KAAKK,MAAL,EAAaH,KAAb,CAAf;;AAEAJ,QAAQC,GAAR,CAAYK,MAAZ,E,CAAqB;AACrBN,QAAQC,GAAR,CAAYM,MAAZ,E,CAAqB;AACrBP,QAAQC,GAAR,CAAYO,MAAZ,E,CAAqB;;AAErB;;AAEA,IAAMC,YAAY,SAAZA,SAAY;AAAA,SAAK,CAAC,MAAD,EAAShB,CAAT,CAAL;AAAA,CAAlB;AACA,IAAMiB,YAAY,SAAZA,SAAY;AAAA,SAAK,CAAC,SAAD,EAAY,IAAZ,CAAL;AAAA,CAAlB;AACA,IAAMC,OAAOF,SAAb;AACA,IAAMG,UAAUF,WAAhB;;AAEA,IAAMG,MAAM,SAANA,GAAM;AAAA;AAAA,MAAEpB,CAAF;;AAAA,SAAUA,CAAV;AAAA,CAAZ;AACA,IAAMqB,MAAM,SAANA,GAAM;AAAA;AAAA,MAAGC,CAAH;;AAAA,SAAUA,CAAV;AAAA,CAAZ;;AAEA,IAAMC,OAAO,SAAPA,IAAO;AAAA,SAAKL,KAAKlB,IAAI,CAAT,CAAL;AAAA,CAAb;;AAEA,IAAMwB,YAAY,SAAZA,SAAY;AAAA,SAAM;AAAA,WAAMJ,IAAIjB,EAAJ,MAAY,MAAZ,GAAqBD,GAAGmB,IAAIlB,EAAJ,CAAH,CAArB,GAAmCgB,OAAzC;AAAA,GAAN;AAAA,CAAlB;;AAEA,IAAMM,SAASD,UAAUN,KAAK,CAAL,CAAV,EAAmBK,IAAnB,CAAf;AACA,IAAMG,SAASF,UAAUC,MAAV,EAAkBF,IAAlB,CAAf;AACA,IAAMI,SAASH,UAAUE,MAAV,EAAkBH,IAAlB,CAAf;AACA,IAAMK,SAASJ,UAAUG,MAAV,EAAkBJ,IAAlB,CAAf;;AAEAhB,QAAQC,GAAR,CAAYiB,MAAZ,E,CAAqB;AACrBlB,QAAQC,GAAR,CAAYkB,MAAZ,E,CAAqB;AACrBnB,QAAQC,GAAR,CAAYmB,MAAZ,E,CAAqB;AACrBpB,QAAQC,GAAR,CAAYoB,MAAZ,E,CAAqB;;AAErBJ,UAAUI,MAAV,EAAkBrB,QAAQC,GAA1B,E,CAAgC","file":"Monads.js","sourcesContent":["// Monads\n\nconst pure = x => {first: x};\n\nconst monadMap = Ma => fn => fn(Ma.first);\n\nconst times10 = x => pure(x * 10);\n\nconst firstMonadResult = monadMap(pure(10))(times10);\nconst secondMonadResult = monadMap(firstMonadResult)(times10);\n\nconsole.log(firstMonadResult);  // {first: 100}\nconsole.log(secondMonadResult); // {first: 1000}\n\n// Maybe Monads #1\n\n// const pure3 = x => {state: true, value: x};\n// const fail = _ => {state: false, value: 'Nothing'};\n\nconst bind = Ma => fn => Ma['state'] ? fn(Ma['value']) : fail();\n\nconst add42 = x => pure3(x + 42);\n\nconst maybe1 = bind(pure3(10))(add42);\nconst maybe2 = bind(fail(maybe1))(add42);\nconst maybe3 = bind(maybe2)(add42);\n\nconsole.log(maybe1); // {state: true, value: 52}\nconsole.log(maybe2); // {state: false, value: 'Nothing'}\nconsole.log(maybe3); // {state: false, value: 'Nothing'}\n\n// Maybe Monads #2\n\nconst pureMaybe = x => ['Just', x];\nconst failMaybe = _ => ['Nothing', null];\nconst just = pureMaybe;\nconst nothing = failMaybe();\n\nconst fst = ([x,]) => x;\nconst snd = ([,y]) => y;\n\nconst add7 = x => just(x + 7);\n\nconst bindMaybe = Ma => fn => fst(Ma) === 'Just' ? fn(snd(Ma)) : nothing;\n\nconst maybe4 = bindMaybe(just(3))(add7);\nconst maybe5 = bindMaybe(maybe4)(add7);\nconst maybe6 = bindMaybe(maybe5)(add7);\nconst maybe7 = bindMaybe(maybe6)(add7);\n\nconsole.log(maybe4); // ['Just', 10]\nconsole.log(maybe5); // ['Just', 17]\nconsole.log(maybe6); // ['Just', 24]\nconsole.log(maybe7); // ['Just', 31]\n\nbindMaybe(maybe7)(console.log); // 31"]}